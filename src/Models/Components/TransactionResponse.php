<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Midday\Midday\Models\Components;


class TransactionResponse
{
    /**
     * Unique identifier of the transaction
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     * Name or description of the transaction
     *
     * @var string $name
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * Monetary amount of the transaction
     *
     * @var float $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    public float $amount;

    /**
     * Currency code of the transaction in ISO 4217 format
     *
     * @var string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    public string $currency;

    /**
     * Date and time of the transaction in ISO 8601 format
     *
     * @var string $date
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('date')]
    public string $date;

    /**
     * Current status of the transaction
     *
     * @var string $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    public string $status;

    /**
     * Whether the transaction has been fulfilled or processed
     *
     * @var bool $isFulfilled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('isFulfilled')]
    public bool $isFulfilled;

    /**
     * Bank account information associated with the transaction
     *
     * @var Account $account
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account')]
    #[\Speakeasy\Serializer\Annotation\Type('\Midday\Midday\Models\Components\Account')]
    public Account $account;

    /**
     * Category information assigned to the transaction for organization
     *
     * @var ?Category $category
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('category')]
    #[\Speakeasy\Serializer\Annotation\Type('\Midday\Midday\Models\Components\Category|null')]
    public ?Category $category;

    /**
     * Whether the transaction is internal (between own accounts)
     *
     * @var ?bool $internal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('internal')]
    public ?bool $internal;

    /**
     * Whether the transaction is part of a recurring series
     *
     * @var ?bool $recurring
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('recurring')]
    public ?bool $recurring;

    /**
     * Whether the transaction was created manually (via API/form) rather than imported from bank connections
     *
     * @var ?bool $manual
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('manual')]
    public ?bool $manual;

    /**
     * Frequency of the recurring transaction if applicable (weekly, monthly, annually, irregular)
     *
     * @var ?string $frequency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('frequency')]
    public ?string $frequency;

    /**
     * Optional note or memo attached to the transaction
     *
     * @var ?string $note
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('note')]
    public ?string $note;

    /**
     * Array of tags associated with the transaction for categorization and filtering
     *
     * @var ?array<TransactionResponseTag> $tags
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tags')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Midday\Midday\Models\Components\TransactionResponseTag>|null')]
    public ?array $tags;

    /**
     * Array of file attachments associated with the transaction (receipts, invoices, etc.)
     *
     * @var ?array<Attachment> $attachments
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('attachments')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\Midday\Midday\Models\Components\Attachment>|null')]
    public ?array $attachments;

    /**
     * @param  string  $id
     * @param  string  $name
     * @param  float  $amount
     * @param  string  $currency
     * @param  string  $date
     * @param  string  $status
     * @param  bool  $isFulfilled
     * @param  Account  $account
     * @param  ?Category  $category
     * @param  ?bool  $internal
     * @param  ?bool  $recurring
     * @param  ?bool  $manual
     * @param  ?string  $frequency
     * @param  ?string  $note
     * @param  ?array<TransactionResponseTag>  $tags
     * @param  ?array<Attachment>  $attachments
     * @phpstan-pure
     */
    public function __construct(string $id, string $name, float $amount, string $currency, string $date, string $status, bool $isFulfilled, Account $account, ?Category $category = null, ?bool $internal = null, ?bool $recurring = null, ?bool $manual = null, ?string $frequency = null, ?string $note = null, ?array $tags = null, ?array $attachments = null)
    {
        $this->id = $id;
        $this->name = $name;
        $this->amount = $amount;
        $this->currency = $currency;
        $this->date = $date;
        $this->status = $status;
        $this->isFulfilled = $isFulfilled;
        $this->account = $account;
        $this->category = $category;
        $this->internal = $internal;
        $this->recurring = $recurring;
        $this->manual = $manual;
        $this->frequency = $frequency;
        $this->note = $note;
        $this->tags = $tags;
        $this->attachments = $attachments;
    }
}