<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Midday\Midday\Models\Operations;


class UpdateTransactionsRequest
{
    /**
     * Array of transaction IDs to update.
     *
     * @var array<string> $ids
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('ids')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string>')]
    public array $ids;

    /**
     * Whether the transactions are internal.
     *
     * @var ?bool $internal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('internal')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $internal = null;

    /**
     * Whether the transactions are recurring.
     *
     * @var ?bool $recurring
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('recurring')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $recurring = null;

    /**
     * Category slug for the transactions.
     *
     * @var ?string $categorySlug
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('categorySlug')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $categorySlug = null;

    /**
     * Status to set for the transactions.
     *
     * @var ?UpdateTransactionsStatus $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\Midday\Midday\Models\Operations\UpdateTransactionsStatus|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?UpdateTransactionsStatus $status = null;

    /**
     * Recurring frequency to set for the transactions.
     *
     * @var ?UpdateTransactionsFrequency $frequency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('frequency')]
    #[\Speakeasy\Serializer\Annotation\Type('\Midday\Midday\Models\Operations\UpdateTransactionsFrequency|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?UpdateTransactionsFrequency $frequency = null;

    /**
     * Note to set for the transactions.
     *
     * @var ?string $note
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('note')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $note = null;

    /**
     * Assigned user ID for the transactions.
     *
     * @var ?string $assignedId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('assignedId')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $assignedId = null;

    /**
     * Tag ID to set for the transactions.
     *
     * @var ?string $tagId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tagId')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $tagId = null;

    /**
     * @param  array<string>  $ids
     * @param  ?bool  $internal
     * @param  ?bool  $recurring
     * @param  ?string  $categorySlug
     * @param  ?UpdateTransactionsStatus  $status
     * @param  ?UpdateTransactionsFrequency  $frequency
     * @param  ?string  $note
     * @param  ?string  $assignedId
     * @param  ?string  $tagId
     * @phpstan-pure
     */
    public function __construct(array $ids, ?bool $internal = null, ?bool $recurring = null, ?string $categorySlug = null, ?UpdateTransactionsStatus $status = null, ?UpdateTransactionsFrequency $frequency = null, ?string $note = null, ?string $assignedId = null, ?string $tagId = null)
    {
        $this->ids = $ids;
        $this->internal = $internal;
        $this->recurring = $recurring;
        $this->categorySlug = $categorySlug;
        $this->status = $status;
        $this->frequency = $frequency;
        $this->note = $note;
        $this->assignedId = $assignedId;
        $this->tagId = $tagId;
    }
}